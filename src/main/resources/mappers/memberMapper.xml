<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssafy.TmT.dao.MemberDao">

	<!-- 사용자 조회 쿼리 -->
	<select id="login" parameterType="String" resultType="Profile">
		SELECT
		member_id,
		member_name,
		picture,
		role,
		created_at
		FROM Member
		WHERE
		member_name =
		#{name}
	</select>

	<!-- 회원가입 쿼리 -->
	<insert id="regist" parameterType="LoginDTO">
		INSERT INTO Member (subject,
		member_name, picture)
		VALUES (#{sub}, #{name}, #{picture})
	</insert>

	<select id="getProfile" parameterType="long"
		resultType="Profile">
		SELECT
		member_id,
		member_name,
		picture,
		created_at,
		role
		FROM
		Member
		WHERE member_id = #{memberId}
	</select>

	<!-- 한 회원의 모든 정보를 조회 -->
	<select id="getAllData" parameterType="Long"
		resultType="String">
		WITH AccountsData AS (
		SELECT
		m.member_id,
		JSON_ARRAYAGG(
		JSON_OBJECT(
		'accountId', a.account_id,
		'accountName', a.account_name,
		'bankName', a.bank_name,
		'balance', a.balance,
		'accountType', a.account_type,
		'maturityDate', a.maturity_date,
		'interestRate', a.interest_rate
		)
		) AS accounts
		FROM Member m
		LEFT JOIN Account a ON m.member_id = a.member_id
		WHERE m.member_id = #{memberId}
		GROUP BY m.member_id
		),
		BudgetsData AS (
		SELECT
		m.member_id,
		JSON_ARRAYAGG(
		JSON_OBJECT(
		'budgetId', b.budget_id,
		'monthBudget', b.month_budget,
		'foodBudget', b.food_budget,
		'livingBudget', b.living_budget,
		'housingCommunicationBudget', b.housing_communication_budget,
		'financeBudget', b.finance_budget,
		'transportationBudget', b.transportation_budget,
		'childcareBudget', b.childcare_budget,
		'leisureCultureBudget', b.leisure_culture_budget,
		'petBudget', b.pet_budget,
		'eventGiftBudget', b.event_gift_budget,
		'createdAt', b.created_at
		)
		) AS budgets
		FROM Member m
		LEFT JOIN Budget b ON m.member_id = b.member_id
		WHERE m.member_id = #{memberId}
		GROUP BY m.member_id
		),
		TransactionsData AS (
		SELECT
		b.member_id,
		JSON_ARRAYAGG(
		JSON_OBJECT(
		'budgetTransactionId', bt.budget_transaction_id,
		'transactionDateTime', bt.transaction_datetime,
		'amount', bt.amount,
		'merchantName', bt.merchant_name,
		'transactionType', bt.transaction_type,
		'categoryName', c.category_name
		)
		) AS transactions
		FROM Budget b
		LEFT JOIN BudgetTransaction bt ON b.budget_id = bt.budget_id
		LEFT JOIN Category c ON bt.category_code = c.category_code
		WHERE b.member_id = #{memberId}
		AND is_active = TRUE
		AND (bt.transaction_datetime >= DATE_SUB(CURRENT_DATE, INTERVAL 1 MONTH)
		OR bt.transaction_datetime IS NULL)
		GROUP BY b.member_id
		)
		SELECT
		JSON_OBJECT(
		'accounts', a.accounts,
		'budgets', b.budgets,
		'transactions', t.transactions
		) AS data
		FROM Member m
		LEFT JOIN AccountsData a ON m.member_id = a.member_id
		LEFT JOIN BudgetsData b ON m.member_id = b.member_id
		LEFT JOIN TransactionsData t ON m.member_id = t.member_id
		WHERE m.member_id = #{memberId};
	</select>


	<update id="modifyBudgetTransaction" parameterType="map">
		UPDATE
		BudgetTransaction
		SET
		merchant_name = #{request.merchantName},
		amount =
		#{request.amount},
		category_code = #{request.categoryCode},
		transaction_type = #{request.transactionType}
		WHERE
		budget_transaction_id = #{budgetTransactionId}
	</update>

<update id="removeBudgetTransaction" parameterType="long">
    UPDATE BudgetTransaction
    SET is_active = FALSE
    WHERE budget_transaction_id = #{budgetTransactionId}
</update>




</mapper>
