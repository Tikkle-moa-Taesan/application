<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.ssafy.TmT.dao.BudgetDao">


	<insert id="createBudget" parameterType="CreateBudgetDTO">
		INSERT INTO Budget
		(member_id, month_budget, created_at)
		VALUES (#{memberId},
		#{monthBudget}, NOW());
	</insert>

	<!-- 카테고리별 지출 불러오기 -->
	<select id="findCategoryExpense" parameterType="long"
		resultType="CategoryExpenseDTO">
		SELECT
		COALESCE(SUM(CASE WHEN c.category_code = 1 THEN
		bt.amount END), 0) AS foodExpense,
		COALESCE(SUM(CASE WHEN
		c.category_code = 2 THEN bt.amount END), 0) AS
		livingExpense,
		COALESCE(SUM(CASE WHEN c.category_code = 3 THEN bt.amount END), 0) AS
		housingCommunicationExpense,
		COALESCE(SUM(CASE WHEN c.category_code = 4
		THEN bt.amount END), 0) AS financeExpense,
		COALESCE(SUM(CASE WHEN
		c.category_code = 5 THEN bt.amount END), 0) AS
		transportationExpense,
		COALESCE(SUM(CASE WHEN c.category_code = 6 THEN bt.amount END), 0) AS
		childcareExpense,
		COALESCE(SUM(CASE WHEN c.category_code = 7 THEN
		bt.amount END), 0) AS
		leisureCultureExpense,
		COALESCE(SUM(CASE WHEN
		c.category_code = 8 THEN bt.amount END), 0) AS petExpense,
		COALESCE(SUM(CASE WHEN c.category_code = 9 THEN bt.amount END), 0) AS
		eventGiftExpense
		FROM
		BudgetTransaction bt
		JOIN
		Category c ON
		bt.category_code = c.category_code
		WHERE
		bt.budget_id = #{budgetId}
		AND
		bt.is_active = TRUE
		AND bt.transaction_type = 'expense'
	</select>



	<!-- BudgetTransaction 업데이트 -->
	<insert id="updateBudgetTransaction"
		parameterType="UpdateBudgetTransactionsDTO">
		INSERT INTO BudgetTransaction (
		budget_id,
		transaction_id,
		account_id,
		category_code,
		transaction_datetime,
		amount,
		merchant_name,
		transaction_type
		)
		SELECT
		#{budgetId} AS budget_id,
		t.transaction_id,
		t.account_id,
		t.category_code,
		t.transaction_datetime,
		t.amount,
		t.merchant_name,
		t.transaction_type
		FROM
		Transaction t
		WHERE
		t.account_id IN (
		SELECT account_id
		FROM Account
		WHERE member_id = #{memberId}
		)
		AND t.transaction_datetime BETWEEN
		DATE_FORMAT(#{createdMonth}, '%Y-%m-01') AND
		LAST_DAY(#{createdMonth})
		AND t.transaction_id NOT IN (
		SELECT transaction_id
		FROM BudgetTransaction
		WHERE budget_id = #{budgetId}
		);
	</insert>


	<select id="getCurrentBudgetId" parameterType="long"
		resultType="long">
		SELECT budget_id
		FROM Budget
		WHERE member_id = #{memberId}
		AND YEAR(created_at) = YEAR(CURRENT_DATE())
		AND MONTH(created_at) =
		MONTH(CURRENT_DATE());
	</select>


	<!-- 최근 예산 ID 조회 -->
	<select id="getPreviousBudgetId" resultType="long">
		SELECT budget_id
		FROM Budget
		WHERE member_id = #{memberId}
		AND DATE_FORMAT(created_at,
		'%Y-%m') = DATE_FORMAT(DATE_SUB(NOW(),
		INTERVAL #{monthsAgo} MONTH),
		'%Y-%m')
		ORDER BY created_at DESC
		LIMIT 1;
	</select>


	<!-- 이번달 가계부 총 지출 합 모으기 -->
	<select id="calculateMonthExpense" parameterType="long"
		resultType="long">
		SELECT COALESCE(SUM(amount), 0)
		FROM BudgetTransaction
		WHERE
		budget_id = #{budgetId}
		AND transaction_type = 'expense'
		AND is_active =
		TRUE;
	</select>

	<!-- 일주일 지출 합, 이번주 저번주 선택 가능 -->
	<select id="calculateWeekExpense" parameterType="WeekExpenseDTO"
		resultType="long">
		SELECT COALESCE(SUM(amount), 0)
		FROM BudgetTransaction
		WHERE
		budget_id = #{budgetId}
		AND transaction_type = 'expense'
		AND
		WEEK(transaction_datetime, 1) = WEEK(DATE_SUB(NOW(), INTERVAL
		#{weekOffset} WEEK), 1)
		AND is_active = TRUE;
	</select>



	<!-- 카테고리별 예산 불러오기 -->
	<select id="findCategoryBudget" parameterType="long"
		resultType="BudgetCategoryResponse">
		SELECT
		food_budget,
		living_budget,
		housing_communication_budget,
		finance_budget,
		transportation_budget,
		childcare_budget,
		leisure_culture_budget,
		pet_budget,
		event_gift_budget
		FROM Budget
		WHERE budget_id = #{budgetId}
	</select>


	<select id="findBudget" parameterType="long" resultType="long">
		SELECT
		month_budget
		FROM Budget
		WHERE budget_id = #{budgetId}
	</select>

	<select id="findBudgetTransactions"
		resultType="BudgetTransactionDTO">
		SELECT
		t.budget_transaction_id,
		c.category_name,
		t.transaction_datetime,
		t.amount,
		t.merchant_name,
		t.transaction_type,
		a.account_name
		FROM
		BudgetTransaction t
		LEFT JOIN
		Category c ON
		t.category_code = c.category_code
		LEFT JOIN
		Account a ON t.account_id =
		a.account_id
		WHERE
		t.budget_id = #{budgetId}
		AND t.is_active = TRUE
		ORDER
		BY
		t.transaction_datetime DESC
		LIMIT #{offset}, 20
	</select>

	<select id="findAllBudgetTransactions" parameterType="long"
		resultType="BudgetTransactionDTO">
		SELECT
		t.budget_transaction_id,
		c.category_name,
		t.transaction_datetime,
		t.amount,
		t.merchant_name,
		t.transaction_type,
		a.account_name
		FROM
		BudgetTransaction t
		LEFT JOIN
		Category c ON
		t.category_code = c.category_code
		LEFT JOIN
		Account a ON t.account_id =
		a.account_id
		WHERE
		t.budget_id = #{budgetId}
		AND t.is_active = TRUE
		ORDER
		BY
		t.transaction_datetime DESC
	</select>

	<select id="findBudgetByDate" resultType="long">
		SELECT
		budget_id
		FROM
		Budget
		WHERE DATE_FORMAT(created_at, '%Y') = #{year}
		AND
		DATE_FORMAT(created_at, '%m') = #{month}
		AND member_id = #{memberId}
		LIMIT 1;
	</select>

	<!-- 이번달 가계부 총 수입 합 모으기 -->
	<select id="calculateMonthIncome" parameterType="long"
		resultType="long">
		SELECT COALESCE(SUM(amount), 0)
		FROM BudgetTransaction
		WHERE
		budget_id = #{budgetId}
		AND transaction_type = 'income'
		AND is_active =
		TRUE;
	</select>

	<!-- 카테고리별 예산 수정 -->
	<update id="modifyCategoryBudget" parameterType="map">
		UPDATE Budget
		SET
		food_budget = #{request.foodBudget},
		living_budget =
		#{request.livingBudget},
		housing_communication_budget =
		#{request.housingCommunicationBudget},
		finance_budget =
		#{request.financeBudget},
		transportation_budget =
		#{request.transportationBudget},
		childcare_budget =
		#{request.childcareBudget},
		leisure_culture_budget =
		#{request.leisureCultureBudget},
		pet_budget = #{request.petBudget},
		event_gift_budget = #{request.eventGiftBudget}
		WHERE member_id =
		#{memberId};
	</update>


	<insert id="createBudgetForMonth"
		parameterType="CreateBudgetDTO">
		INSERT INTO Budget (member_id, month_budget, created_at)
		VALUES (#{memberId}, #{monthBudget}, #{createdAt});
	</insert>




</mapper>